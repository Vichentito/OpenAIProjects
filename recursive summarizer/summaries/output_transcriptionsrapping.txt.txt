Para automatizar la descarga de videos de TikTok, primero abrimos la página de TikTok de Papaya. En lugar de hacer clic en cada video para obtener el enlace, como lo haríamos normalmente, pensamos como programadores. Todos los sitios web usan HTML. Para vincular a un usuario a otra página, tenemos que usar una etiqueta A y proporcionar una dirección URL a la que queremos vincular al usuario. Para acceder al HTML en la página, solo tenemos que hacer clic derecho y hacer clic en Inspect. Esto abrirá la herramienta Console para que podamos inspeccionar el HTML en la página. Al mover el cursor, veremos que destacará cada elemento HTML. Para nuestro caso, queremos ver las etiquetas A de cada video. Ahora expandimos esto y encontramos dos divs. El primero es para videos y me gusta, y el segundo es para todos los videos. Expandimos esto y ahora podemos ver cada video individualmente. Buscamos la etiqueta A y confirmamos que funciona. Luego, para obtener el documento HTML, usamos Python, Selenium y Beautiful Soup. Creamos un nuevo archivo y le damos un nombre. Luego escribimos from Selenium import WebDriver para importar la biblioteca Selenium, que nos permite escribir código de automatización que abre un navegador web. Después importamos time para usar time en Python. Usamos BeautifulSoup para analizar el HTML dentro de él y luego imprimimos el resultado con soup.printify para verificar si nuestro código funciona correctamente. Finalmente, abrimos nuestro terminal y ejecutamos el código con el comando Python 3 e ingresando el nombre del archivo (por ejemplo: scrape_video.py).

En este tutorial, cubriremos cómo configurar el entorno de Python para ejecutar un código que recopilará enlaces de videos desde una página web usando Selenium y BeautifulSoup. Primero, instalamos las bibliotecas necesarias usando pip. Después de establecer todo, ejecutamos el código. Esto abrió un navegador web e imprimió el HTML de la página en la terminal. Usando BeautifulSoup, buscamos los elementos dentro del HTML y encontramos divs con el mismo nombre de clase. Después, buscamos el div más cercano al tag a y comprobamos que todos los demás tienen el mismo nombre. Una vez que hicimos esto, usamos BeautifulSoup para encontrar todos los divs con ese nombre. Luego imprimimos la longitud de los videos para ver cuántos videos obtuvimos. Sin embargo, solo obtuvimos 29 videos cuando hay alrededor de 500 videos. Esto se debe a que la página solo carga los videos que se pueden ver inicialmente. Para ver todos los videos, tuvimos que usar Google para encontrar una solución que permitiera a Selenium desplazarse por la página hasta llegar al final. Finalmente, implementamos el código para lograr esto y obtuvimos todos los enlaces correctamente.

En este código, se ejecuta un bucle while que ejecuta el código JavaScript para desplazarse hacia abajo. Luego hay una variable i para mantener el registro de cuántas veces hemos desplazado. Aquí le decimos al programa que espere el tiempo de pausa de desplazamiento, que es solo un segundo. Luego se ejecuta otra función JavaScript, que básicamente recoge la nueva altura del desplazamiento de la página. Comparamos la altura de la pantalla multiplicada por el número de veces que hemos desplazado, y comprobamos si ese valor es mayor que la altura de desplazamiento actual. Si es mayor, significa que hemos llegado al final de la página. Después de ejecutar el código, abre el navegador y vemos como desplaza automáticamente hasta llegar al fondo de la página. Al final contamos 457 videos en total. Luego vamos a un sitio web llamado tic.io, que permite descargar videos de TikTok sin marca de agua. Pegamos el enlace a uno de los videos, hacemos clic en descargar, y en la pestaña Redes vemos las actividades de red que suceden cuando hacemos clic en Descargar. Encontramos una etiqueta A con un enlace sin marca de agua, así que copiamos el href y lo convertimos en Python usando curledconverter.com. Creamos una función llamada download video que toma un enlace como parámetro y hacemos una solicitud post con los parámetros y cookies, cabeceras y datos correspondientes. Finalmente usamos Beautiful Soup para parsear los datos HTML de la respuesta para obtener el enlace al video TikTok.

En este ejemplo, creamos una nueva variable llamada "descargar sopa" que equivale a "Sopa Hermosa". Luego, usamos la función ".text" para obtener el HTML dentro de la respuesta. También creamos una variable llamada "enlace de descarga" que iguala a "descargar sopa.a [href]". Para descargar el archivo, importamos otra biblioteca llamada "urllib.request". Después, creamos una nueva variable llamada "archivo mp4" que iguala a "urlopen" y pasamos el enlace de descarga como parámetro. Finalmente, usamos un bucle while para leer y escribir los datos en el archivo. El código se ejecutó con éxito y se descargó un archivo de video, pero tenían que haber descargado todos los videos. El problema fue que estaban saturando el servidor con muchas solicitudes muy rápido.

En este video, el orador muestra cómo evitar que el servidor crea que somos un bot al agregar un retraso arbitrario. Luego, luego de descargar un video, usa "time.sleep" para detener el código por 10 segundos para asegurarse de que el servidor entienda que no es un bot. Esto funciona, y el tercer video se descarga. Sin embargo, hay un límite de 10 videos que se pueden subir a la vez. El orador finalmente comparte su proceso de pensamiento y da ejemplos de cosas que los espectadores pueden hacer para automatizar su trabajo, como construir un bot de zapatillas o una aplicación que les avise cuando algún producto que quieran comprar esté en oferta.