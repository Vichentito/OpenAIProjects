Alright, so first things first, let's open up Papaya's TikTok page. And also, just a reminder that this is just an example, so feel free to use any TikTok page that you want to automate downloading videos for. To get the link to the video, all we have to do is open the video and copy the address at the top. This method requires a lot of clicking, so instead, we should think like programmers. Every website basically uses HTML. In order to link a user to another page, we have to use an A tag and provide an href with the URL that we want to link the user to. So to access the HTML on the page, all we have to do is right-click and click Inspect. And this opens the console tool so that we can inspect the HTML on the page. And as you move your cursor around, you'll see that it'll highlight each HTML element. So for our case, we want to see the A tags for each of these videos. And when I move my mouse here, I see that the stuff that I want is highlighted. So let's expand this. So click the arrow to expand. And now, as you can see, there are two divs. The first one is for videos and liked, and the second one is for all of the videos. So now let's expand this. And let's expand this one. And here we go. We got each individual video. So now let's open the first one. And let's try to find the A tag. I'm going to expand this, expand this, expand this. And look at that. We found the A tag. And I'm just going to click on it just to make sure that it works. And this looks like the correct link. So let's close this. So now that we confirmed that this works, the next thing we need to do is find a way to get this HTML document so that way we can grab all the hrefs for each video. So we can achieve this very easily by using Python, Selenium, and Beautiful Soup. So now open a new file and give it a name and save it. And inside here, type from Selenium import WebDriver. And this will basically import the Selenium library, which basically allows you to write automation code that opens a web browser. And then it can click stuff, search stuff, and et cetera. You can kind of think of this as a bot. So cool. Next, just type driver equals WebDriver.chrome, which basically specifies the browser that we want to use. So in this case, we want to use Chrome. Next, type driver.get and then open the parentheses. And inside here, open quotation marks and paste the link of the website that you want to get. So in this case, we want to get the TikTok website. And next, we want to add a delay to the code so that way it waits for the website to load. So we can do time.sleep and then open the parentheses and put one for one second. And in order to use time in Python, we have to import time. So let's type import time. Cool. So now that we have loaded the web page, we want to parse the HTML inside it. And a great library for this is BeautifulSoup. So to use BeautifulSoup, all we have to do is import it. So we have to type from BS4 import BeautifulSoup. And now in our code, we can do soup equals BeautifulSoup and then open the parentheses and type driver.page underscore source, which will give us the HTML source from the page. And now hit comma, space, and open the quotes. And inside here, type HTML.parser to specify that we want to parse HTML. Cool. Now in the next line, just type print, open the parentheses, and do soup.printify, and then open the parentheses. This line will let us test whether our code works. And printify just makes the HTML look pretty so that it's easy for us to read. Now hit Save and save this code somewhere on your computer. And now open your terminal. In VS Code, in the top, you can click Terminal and click New Terminal. And this will just open a terminal. And to run this code, you can type the command Python. And I'm using Python 3, so I'll type 3, space, and then type the name of your file. So for me, it's scrape underscore video.py. If you don't have Python on your computer, make sure to install it. Installing Python is out of the scope for this tutorial, so I won't be covering that. And if you run into errors related to missing dependencies, you can fix that very easily by typing pip. And in my case, since I'm using Python 3, I have to put a 3 at the end. And then you can just do Install and basically the name of the module. So here you can type Selenium. And then we want to install BeautifulSoup, which is BS4, like this. And then hit Enter. And this will basically install the libraries that we need to run this code. Once everything is set up, feel free to run the code. And as you can see, it opened a web browser. And then it loads the page. And after one second, the page closes because the code finished executing. And now if you look inside my terminal, I basically got the HTML for the page. Cool. So now we basically have this HTML within our Python code. And the cool thing about BeautifulSoup is that it's able to find elements within the HTML. So for example, each video is within a div with a class called tiktok-x6y, et cetera. And they all have the same class name. So basically with BeautifulSoup, we can specify that we only want divs with the name tiktok-x6y, et cetera. And it will select all of them and return it back as a list. And to make our lives easier, we should try to get the div closest to the a tag. And the div that contains the a tag is tiktok-yz6i, et cetera. And just to be safe, we should double check that all the other divs have the same naming. So let's open the second video and open the first div and open this div and open this div as well. And here we see the a tag. And now if we look at the class, we see tiktok-yz6ijl, et cetera, which basically matches the one at the top. So this makes our lives very easy. So now we can just look for the div with this class name. So let's copy this. And now let's go back to our code. And now remove this line and type videos equals soup.find underscore all. And now open the parentheses and open the quotation marks and type div and then add a comma and then space and then open the squiggle brackets. And now inside here, open the quotation marks and type class and then open the colon and now open the quotation marks and paste that class name. And all we're doing here is we're saying we want to find all the divs with the class name tiktok-yz, et cetera. And now let's do print and let's get the length of the videos. So that way we know how many videos we got back. And then next we can just loop through each video. So we can do for video in videos and add a colon and go to the next line. And now just type prints, open the parentheses and type video. And now we can do dot and then we can type a, which means it's getting the a tag within the div and then open the square brackets and then open the quotation marks and type href, which means we want to grab the href value from inside the a tag. And now let's hit save and now go back to your terminal and let's run this command again. Cool. So it opens the page and then one second later it closes. And now if you look at my terminal again, we basically got all the links of the videos inside the page. And if you look closely, we only got 29 videos. This doesn't really add up because technically we actually have around 500 videos. So it looks like something's not working properly. So let's go back to this page. So one interesting thing about this page is that as you scroll more videos get loaded. So this is going to be a problem for our code because we're only loading whatever we can see initially. So if we want to see more videos, we have to tell Selenium to scroll through the page until it reaches the bottom. So that way we can get all of the videos. Now that sounds super complicated and that's where Google comes in. We should use Google as a resource to help us find a way to achieve this. So I came across this medium post by Quan Wei and this does exactly what we want to do. Here's what we're going to do.
Here's the code that basically handles scrolling all the way to the bottom of the page. So we only care about this part of the code, so let's copy it and let's go back to our code and let's paste this in the middle before we grab the page source from the driver. And I'm missing an S here, so let's add it back. So basically this code just runs a while loop that executes JavaScript code to scroll down. And then we have a variable i to keep track of how many times we have scrolled. And here we tell the program to sleep for scroll pause time, which is just one second. And here we execute another JavaScript function, which basically grabs the new scroll height of the page. And we basically compare the height of the screen multiplied by the number of times that we have scrolled. And we check whether this value is greater than the current scroll height. And if it's greater, that basically just means that we've reached the end of the page. Cool. So now let's hit save. And now let's run our code again. Hit enter. And here it opens the browser. And let's watch some magic. You see that it's scrolling by itself. Isn't that awesome? And now I'll just speed up the video and let it scroll all the way to the bottom. And that took a while because we had a lot of videos. But now look at our console. We actually have a lot of videos. And when I scroll all the way to the top, you're going to see that we have 457 videos in total. I guess I was off by like 50, but still, that's a lot of videos. Cool. Now that we have all these links, the next thing we need to do is just go to this website, which is tic.io, which basically allows you to download TikTok videos without a watermark. So let's paste the link to one of the videos. And before we hit download, right click on the page and go to inspect and then go to the networks tab. And basically on this tab, it will record network activity. So let me show you what that means. So let's go back to the page and click download. And if you look at the right, you're going to see that three network activities happened when we click the download button. And if you click response, you're going to see that it returns HTML. And if you look here, there's an A tag. And if I scroll to the right, and you're going to see that this A tag is for this button without watermark. So basically we only care about this href from this A tag. And if you right click on this network activity, go to copy, and then click copy as curl. Go to the site called curledconverter.com. And inside this text field, just paste what we copied. And this will turn the curl command into Python. So now scroll to the bottom and click copy to clipboard. And now let's go back to your code. And now let's create a function and call it download video. And open the parentheses. And here it can take a link as a parameter and open the colon and hit enter. And now paste the code that we just copied. And now let's move this import to the top of the file. So delete this line and scroll to the top. And let's paste it on line four. And let's fix the spacing and hit enter. And now scroll down. And now let's indent all of the code that we just copied. And now let's fix the spacing. So basically all of the code here just represents the data that gets sent over when we make the request to that website. And if you scroll all the way to the bottom, you're going to see that we make a request to post data to this link. And we pass in the parameters and the cookies, headers, and the data. And if you look in the data field, you're going to see this ID, which has a link to the TikTok video. So instead of hard coding a link, let's replace this with link, which is the parameter that we added to this function. So now let's copy the function name. And here, instead of printing this value, let's just call our download video function. And now let's go back to the bottom of the page. And after we make this request, we'll get back a response. And since the response is HTML, all we got to do is just use Beautiful Soup to parse the HTML data. So now let's create a new variable called download soup. And this will equal Beautiful Soup. Open the parentheses and type response. And if we do.text, this will give us the HTML inside the response. And put a comma and open the quotation marks and type HTML.parser. And then hit Enter. And like I mentioned before, we only care about the first a tag. So we can get that very easily. So let's do download link equals download soup.a square bracket href. And now the last thing that we need to do is to download the file. So we have to import another library. So let's go to the top. And now in line 5, just type from urllib.request import url open. And hit Enter. And basically, we will use this library to allow us to download the raw data of the file. So now scroll back to the bottom of the page. And after the download link, let's create a new variable called mp4 file equals url open. And then we can pass it the download link. And this will download the file as raw data. And now all we have to do is save this file onto our computer. So let's do with open. And then open the parentheses. And let's use an f string here. So f quotation marks. And I want to put it in a folder called videos slash. And open the squiggle brackets. And let's put the ID of the video here. And then we can do.mp4. And then add a comma. And open the quotation marks, wb, which stands for writing in binary. So we need this in order to write to a file. And then type as output. And then put a colon and hit Enter. And now we're going to write a while loop. So while true, all we're going to do is data equals mp4 file dot read 4096. So now let's get back to the code. So hit Enter. And now type if data. So basically, if we're able to read data, we want to write this data to the output file. So do output dot write. And then open the parentheses and put data. And then hit Enter. And then add an else statement. Where basically, if no data comes back, that just means that we finished reading from the file. So now we can add a break statement, which means that we're done with the while loop. So now hit Save. And before you run the code, make sure you make a folder called videos in the folder where your script is located. Because in the example here, I'm creating the video inside a folder called videos. And I'm giving it an ID. And that just reminded me, I forgot to pass a ID parameter. So let's scroll up. And here inside the download video, add a comma and put ID here. And in here, let's just pass the index as the ID. So now if we want the index, all we have to do is add index here and add a comma. And here on the videos, we do enumerate and open the parentheses and close the parentheses. And this will basically give us the index along with the video. And now let's hit Save. And now let's run our script. Cool. So here's the page, and now it scrolls to the bottom. And yeah, of course I got an error. Live coding is just too hard. So basically the error is saying that download video is not defined. So let's look at my code. And I'm assuming the error is because I declared the function after it was called. So that's why the code can't find it. So we can fix this very easily. So let's copy this whole function. And let's delete it. And now scroll to the top of the video. And let's paste it above everything else. And hit Save. And let's try this again. Oh, crap. Looks like I got another error. I just had a spelling mistake. So I was supposed to capitalize this F. So let me do that. And let me try this again. All right. Let's cross our fingers and hope that everything works fine. Oh, crap. We got another error. Hmm. It looks like our script wasn't able to read the href inside the a tag. But on the bright side, it looks like we did download one video. So let's open this video and make sure that it works. Ha ha. Nice. It looks like it works. But technically, we're supposed to download all the videos, right? And the issue here is that we're spamming a server with a lot of requests very quickly. So the server probably thinks that we're a bot. And we can actually get around this very easily by just adding an arbitrary delay. So now let's scroll down and go to where we called the download video. So right here. So after we download one video, let's do time.sleep. And let's just sleep for 10 seconds just to be safe. So let's save this and let's run the code again. Third time's the charm, right? Crossing my fingers. Let's go. And look at that. We got zero and one. And let's wait another 10 seconds. And you're going to see the next video get downloaded. And look, the third video just came in. So because there's a 10 second delay, it's going to be a long while before we download all the videos. But basically, look, it's working. And this is awesome. And unfortunately, YouTube has a cap and I can't upload more than 10 videos at a time. So I guess what we have right now is pretty good. Anyways, that's it for this video. I hope that you guys learned something new. I wanted to share my thought process of how I approached this problem and how I was able to come up with the solution. As you can see, we only scratched the surface of automation. There is so many things that you guys can do. If you ever get stuck, try to read the documentation for Beautiful Soup and also Selenium. And if you guys are up for the challenge, try to build your own web scraper to grab some useful data. Maybe you guys can even build a sneaker bot or even some application that will notify you when an item that you want to buy goes on sale. Anyways, the world is your oyster. So try to build something cool and let me know what you guys build in the comments below. Thank you guys. See you later.
